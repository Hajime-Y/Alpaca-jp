{"id": "python_seed_task_0", "instruction": "次のSQLデータベースから、「名前」と「年齢」のフィールドを抽出するpythonコードを書きなさい。", "instances": [{"input": "SQLデータベースのテーブル: \"users\"\n可能なフィールド: \"id\", \"name\", \"age\", \"address\"", "output": "```python\nimport sqlite3\n\n# Connect to the SQLite database\nconn = sqlite3.connect('my_database.db')\n\n# Create a cursor object\ncur = conn.cursor()\n\n# Execute a SELECT statement\ncur.execute('SELECT name, age FROM users')\n\n# Fetch all the rows\nrows = cur.fetchall()\n\nfor row in rows:\n    print(row)\n\n# Close the connection\nconn.close()\n```"}], "is_classification": false}
{"id": "python_seed_task_1", "instruction": "与えられたXMLファイル(\"example.xml\")から特定の要素の値を取得するpythonコードを書きなさい。", "instances": [{"input": "example.xml\n```xml\n<root>\n    <name>Alice</name>\n    <age>30</age>\n</root>\n```", "output": "```python\nimport xml.etree.ElementTree as ET\n\ntree = ET.parse('example.xml')\nroot = tree.getroot()\n\nname = root.find('name').text\nage = root.find('age').text\n\nprint(f\"Name: {name}, Age: {age}\")\n```"}], "is_classification": false}
{"id": "python_seed_task_2", "instruction": "与えられたデータベース接続情報（\"db.ini\"）を使用して、顧客テーブルから情報を取得するpythonコードを書きなさい。", "instances": [{"input": "db.ini\n```\n[Database]\nhost = localhost\ndatabase = test_db\nuser = test_user\npassword = test_password\n```", "output": "```python\nimport configparser\nimport psycopg2\n\nconfig = configparser.ConfigParser()\nconfig.read('db.ini')\n\nconn = psycopg2.connect(\n    host=config['Database']['host'],\n    database=config['Database']['database'],\n    user=config['Database']['user'],\n    password=config['Database']['password']\n)\n\ncur = conn.cursor()\ncur.execute(\"SELECT * FROM customers\")\nrows = cur.fetchall()\n\nfor row in rows:\n    print(row)\n```"}], "is_classification": false}
{"id": "python_seed_task_3", "instruction": "与えられたCSVファイル内のデータを読み込んでデータフレームを作成するpythonコードを記述してください。", "instances": [{"input": "\"data.csv\"というファイル名のCSVファイルがあり、その中には3つの列があります。名前（name）、年齢（age）、国（country）です。", "output": "```\nimport pandas as pd\n\ndf = pd.read_csv('data.csv')\n```"}], "is_classification": false}
{"id": "python_seed_task_4", "instruction": "与えられた日付のフォーマットをYYYY-MM-DD形式に変換するpython関数を記述してください。", "instances": [{"input": "\"MM/DD/YYYY\" というフォーマットで表された日付が与えられます。", "output": "```python\nfrom datetime import datetime\n\ndef convert_date_format(date_str):\n    dt = datetime.strptime(date_str, \"%m/%d/%Y\")\n    return dt.strftime(\"%Y-%m-%d\")\n```"}], "is_classification": false}
{"id": "python_seed_task_5", "instruction": "与えられたリストから、一意の値を抽出するpython関数を記述してください。", "instances": [{"input": "[1, 1, 2, 2, 3, 4, 5, 5, 5]というリストが与えられます", "output": "```python\ndef extract_unique(lst):\n    return list(set(lst))\n```"}], "is_classification": false}
{"id": "python_seed_task_6", "instruction": "与えられたテキストファイルを読み込んで、その中に含まれる単語の出現頻度をカウントするpythonコードを記述してください。", "instances": [{"input": "テキストファイル (\"text.txt\") が与えられます。", "output": "```python\nimport re\nfrom collections import Counter\n\ndef word_counter(file_path):\n    with open(file_path, 'r') as f:\n        text = f.read().lower()\n        words = re.findall(r'\\b\\w+\\b', text)\n        return Counter(words)\n```"}], "is_classification": false}
{"id": "python_seed_task_7", "instruction": "以下のCSVデータを読み込み、人口が5000人を超える都市の名前を出力してください。", "instances": [{"input": "```\nCity,Population\nTokyo,9000000\nNew York,8500000\nLondon,8200000\nParis,2100000\nBerlin,3500000\n```", "output": "```python\nimport csv\n\nwith open('cities.csv', 'r') as f:\n    reader = csv.reader(f)\n    next(reader)  # Skip header\n    cities = [row for row in reader]\n\ncities_over_5000k = [city[0] for city in cities if int(city[1]) > 5000000]\nprint(cities_over_5000k)\n```\n5. Instruction: 以下のXMLデータを読み込み、誕生日が2000年1月1日以降の人の名前のリストを出力してください。\n5. Input:\n```xml\n<people>\n    <person>\n        <name>Alice</name>\n        <birthday>1990-01-01</birthday>\n    </person>\n    <person>\n        <name>Bob</name>\n        <birthday>2000-01-01</birthday>\n    </person>\n    <person>\n        <name>Charlie</name>\n        <birthday>2005-01-01</birthday>\n    </person>\n</people>\n```\n5. Output:\n```python\nimport xml.etree.ElementTree as ET\n\ntree = ET.parse('people.xml')\nroot = tree.getroot()\n\npeople = [person.find('name').text for person in root.findall('person') if person.find('birthday').text >= '2000-01-01']\nprint(people)\n```\n6. Instruction: 以下のPythonコードを修正して、正しく動作するようにしてください。\n6. Input:\n```python\ndef sum(a, b):\n    return = a + b\n```\n6. Output:\n```python\ndef sum(a, b):\n    return a + b\n```\n7. Instruction:\n以下のSQLデータベースから、年齢が20歳未満の人の名前と年齢をCSV出力してください。\n7. Input:\n```\nCREATE TABLE people (\n    name TEXT,\n    age INTEGER\n);\n\nINSERT INTO people (name, age) VALUES ('Alice', 25);\nINSERT INTO people (name, age) VALUES ('Bob', 18);\nINSERT INTO people (name, age) VALUES ('Charlie', 15);\n```\n7. Output:\n```python\nimport csv\nimport sqlite3\n\nconn = sqlite3.connect('people.db')\nc = conn.cursor()\n\npeople = c.execute('SELECT name, age FROM people WHERE age < 20').fetchall()\n\nwith open('people_under_20.csv', 'w') as f:\n    writer = csv.writer(f)\n    writer.writerow(['Name', 'Age'])\n    for row in people:\n        writer.writerow(row)\n```\n8. Instruction: 以下のコードを実行したときの結果を推定してください。\n8. Input:\n```python\nx = 5\ny = 10\nz = x + y\nx = 20\nprint(z)\n```\n8. Output:\n```\n15\n```\n9. Instruction: 以下の文字列を日付形式に変換してください。\n9. Input:\n```python\n'2022/03/15'\n```\n9. Output:\n```python\nfrom datetime import datetime\n\ndate_str = '2022/03/15'\ndate = datetime.strptime(date_str, '%Y/%m/%d')\nprint(date)\n```"}], "is_classification": false}
{"id": "python_seed_task_8", "instruction": "次のデータベーステーブルから、年齢が20歳以上の人の名前と年齢を抽出するSQLクエリとPythonプログラムを書きなさい。", "instances": [{"input": "```sql\nCREATE TABLE people (\n    id INT PRIMARY KEY,\n    name TEXT NOT NULL,\n    age INT NOT NULL\n);\n\nINSERT INTO people VALUES\n    (1, 'Alice', 30),\n    (2, 'Bob', 25),\n    (3, 'Charlie', 35),\n    (4, 'Dave', 18);\n```", "output": "```sql\nSELECT name, age FROM people WHERE age >= 20;\n```\n```python\nimport sqlite3\n\ndef get_adults(database_file):\n    conn = sqlite3.connect(database_file)\n    cursor = conn.cursor()\n\n    cursor.execute(\"SELECT name, age FROM people WHERE age >= 20\")\n    return cursor.fetchall()\n```"}], "is_classification": false}
{"id": "python_seed_task_9", "instruction": "次の XML データからpythonで検索するための適切な方法を教えてください。", "instances": [{"input": "```\n<root>\n  <element>\n    <name> foo </name>\n    <value> 1 </value>\n  </element>\n  <element>\n    <name> bar </name>\n    <value> 2 </value>\n  </element>\n</root>\n```", "output": "```python\nimport xml.etree.ElementTree as ET\n\ndata = '''\n<root>\n  <element>\n    <name> foo </name>\n    <value> 1 </value>\n  </element>\n  <element>\n    <name> bar </name>\n    <value> 2 </value>\n  </element>\n</root>\n'''\n\nroot = ET.fromstring(data)\n\n# 以下のようにして要素を取得できます:\n# element = root.find('./element[name=\"foo\"]')\n# value = int(element.find('value').text)\n```"}], "is_classification": false}
{"id": "python_seed_task_10", "instruction": "次のpythonコードの実行結果を予測してください。", "instances": [{"input": "```python\ndef greet(name):\n    if name:\n        return f'Hello {name}!'\n    else:\n        return 'Hello world!'\n\nprint(greet('Alice'))\nprint(greet(None))\n```", "output": "```\nHello Alice!\nHello world!\n```"}], "is_classification": false}
{"id": "python_seed_task_11", "instruction": "次のSQLデータをPythonコードで読み込むための適切な方法を教えてください。", "instances": [{"input": "```\nSELECT * FROM users;\n+----+-------+------------+------------+\n| id | name  | birthdate  | city       |\n+----+-------+------------+------------+\n|  1 | Alice | 1992-02-10 | Tokyo      |\n|  2 | Bob   | 1987-05-05 | Osaka      |\n|  3 | Carol | 1990-12-25 | Kyoto      |\n+----+-------+------------+------------+\n```", "output": "```python\nimport sqlite3\n\n# SQLite3データベースを開く\nconn = sqlite3.connect('database.db')\n\n# SQLクエリを実行して結果を取得\ncursor = conn.cursor()\ncursor.execute(\"SELECT * FROM users\")\n\n# 結果をリストに変換\nusers = cursor.fetchall()\n\n# データベース接続を閉じる\nconn.close()\n\nprint(users)\n```"}], "is_classification": false}
{"id": "python_seed_task_12", "instruction": "与えられたCSVファイル（例: data.csv）を読み込むPythonコードを書きなさい。CSVファイルにはID、名前、年齢のカラムがあります。", "instances": [{"input": "data.csv\n\nID,Name,Age\n\n1,Alice,25\n\n2,Bob,32\n\n3,Charlie,37", "output": "import csv\n\ndata = []\n\nwith open('data.csv', 'r') as file:\n    reader = csv.DictReader(file)\n    for row in reader:\n        data.append(row)\n\nprint(data)"}], "is_classification": false}
{"id": "python_seed_task_13", "instruction": "与えられたCSVファイルに含まれる人物データを操作するpythonコードを書きなさい。CSVファイル内の年齢が30歳を超える人物の数を返す関数を作成しなさい。", "instances": [{"input": "```\nname,age\nAlice,25\nBob,35\nCharlie,45\nDavid,22\nEve,37\n```", "output": "```python\nimport csv\n\ndef count_over_thirty(file_path):\n    count = 0\n    with open(file_path, newline='') as csvfile:\n        reader = csv.DictReader(csvfile)\n        for row in reader:\n            if int(row['age']) > 30:\n                count += 1\n    return count\n```"}], "is_classification": false}
{"id": "python_seed_task_14", "instruction": "次のエラーを修正した新しい python コードを提供してください。", "instances": [{"input": "```python\ndef add_numbers(a, b):\n    return a + b\n\nresult = add_numbers(4, 5, 6) # 引数の数が違う\n```", "output": "```python\ndef add_numbers(a, b):\n    return a + b\n\nresult = add_numbers(4, 5) # 引数の数を修正\n```"}], "is_classification": false}
{"id": "python_seed_task_15", "instruction": "次のXMLデータから指定された要素を取得する python 関数を書きなさい。", "instances": [{"input": "```xml\n<data>\n  <person>\n    <name>Alice</name>\n    <age>30</age>\n  </person>\n  <person>\n    <name>Bob</name>\n    <age>35</age>\n  </person>\n</data>\n```", "output": "```python\nimport xml.etree.ElementTree as ET\n\ndef get_person_names(xml_data):\n    root = ET.fromstring(xml_data)\n    return [person.find('name').text for person in root.findall('person')]\n```"}], "is_classification": false}
{"id": "python_seed_task_16", "instruction": "指定された文字列の文字数をカウントする python 関数を書きなさい。", "instances": [{"input": "", "output": "```python\ndef count_characters(s):\n    return len(s)\n```"}], "is_classification": false}
{"id": "python_seed_task_17", "instruction": "与えられたリストから条件を満たす要素のみを抽出し、新しいリストを返す python 関数を書きなさい。条件は、要素が偶数の数字であることです。", "instances": [{"input": "", "output": "```python\ndef extract_even_numbers(lst):\n    return [num for num in lst if num % 2 == 0]\n```"}], "is_classification": false}
{"id": "python_seed_task_18", "instruction": "与えられたCSVファイルからデータを読み取るPythonコードを書きなさい。", "instances": [{"input": "\"data.csv\"という名前のCSVファイル、以下のようになっています\n\n| 名前 | 年齢 |\n| --- | --- |\n| 太郎 | 30 |\n| 次郎 | 25 |\n| 三郎 | 28 |", "output": "```\nimport csv\n\nwith open('data.csv', 'r') as file:\n    reader = csv.reader(file)\n    next(reader)  # ヘッダー行をスキップ\n    data = [row for row in reader]\nprint(data)\n```"}], "is_classification": false}
{"id": "python_seed_task_19", "instruction": "与えられたSQLクエリの結果から取得されたデータをCSVファイルに書き込むPythonスクリプトを書きなさい。", "instances": [{"input": "```python\nimport csv\nimport sqlite3\n\n# SQLクエリ\nquery = \"SELECT * FROM employees\"\n\n# SQLiteデータベースへの接続\nconn = sqlite3.connect(\"employees.db\")\n\n# SQLクエリの実行\ncursor = conn.cursor()\ncursor.execute(query)\n\n# SQLクエリの結果\nresult = cursor.fetchall()\n\n# ヘッダー行を取得\nheaders = [desc[0] for desc in cursor.description]\n```", "output": "```python\nwith open(\"output.csv\", \"w\", newline=\"\", encoding=\"utf-8\") as file:\n    writer = csv.writer(file)\n    writer.writerow(headers)\n    writer.writerows(result)\n\n# データベース接続の解除\nconn.close()\n```"}], "is_classification": false}
{"id": "python_seed_task_20", "instruction": "与えられたPythonリスト内の連続した重複を削除する関数を書きなさい。", "instances": [{"input": "```python\nlst = [1, 1, 2, 2, 2, 3, 4, 4, 5, 5, 5, 5, 6]\n```", "output": "```python\ndef remove_duplicates(lst):\n    result = []\n    for i in lst:\n        if not result or result[-1] != i:\n            result.append(i)\n    return result\n\nprint(remove_duplicates(lst))\n```"}], "is_classification": false}
{"id": "python_seed_task_21", "instruction": "与えられたXMLファイルをパースし、特定のタグ内のテキストを抽出する関数を書きなさい。タグの名前は'tagname'とします。", "instances": [{"input": "```python\nimport xml.etree.ElementTree as ET\n\n# XMLファイルパス\nfile_path = \"example.xml\"\n```", "output": "```python\ndef extract_text_from_tag(file_path, tagname):\n    tree = ET.parse(file_path)\n    root = tree.getroot()\n    texts = [elem.text for elem in root.iter(tagname)]\n    return texts\n\nprint(extract_text_from_tag(file_path, \"tagname\"))\n```"}], "is_classification": false}
{"id": "python_seed_task_22", "instruction": "与えられた二次元リストの中の各要素の合計値を求め、結果を出力する関数を書きなさい。", "instances": [{"input": "```python\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n```", "output": "```python\ndef sum_matrix(matrix):\n    total = 0\n    for row in matrix:\n        total += sum(row)\n    return total\n\nprint(sum_matrix(matrix))\n```"}], "is_classification": false}
{"id": "python_seed_task_23", "instruction": "あなたのPythonコード内の繰り返しループを改善することで、処理時間を短縮する方法を提案してください。", "instances": [{"input": "```\nfor i in range(len(data)):\n    if data[i]['age'] < 18:\n        data[i]['is_adult'] = False\n    else:\n        data[i]['is_adult'] = True\n```", "output": "```\nfor i in data:\n    i['is_adult'] = i['age'] >= 18\n```"}], "is_classification": false}
{"id": "python_seed_task_24", "instruction": "次のPython関数を読んで、何をするものかを日本語で説明してください。", "instances": [{"input": "```\ndef calculate_discount(price, discount_percent):\n    return price * (1 - discount_percent / 100)\n```", "output": "このPython関数は、与えられた割引率で商品の値段から割引額を計算するものです。"}], "is_classification": false}
{"id": "python_seed_task_25", "instruction": "以下のコードは何をしているか説明せよ。", "instances": [{"input": "```python\nclass Animal:\n    def __init__(self, name):\n        self.name = name\n\n    def speak(self):\n        raise NotImplementedError(\"Subclass must implement this abstract method\")\n\nclass Dog(Animal):\n    def speak(self):\n        return \"Woof!\"\n\nclass Cat(Animal):\n    def speak(self):\n        return \"Meow!\"\n\nanimals = [Dog(\"Fido\"), Cat(\"Whiskers\")]\n\nfor animal in animals:\n    print(animal.name + \" says \" + animal.speak())\n```", "output": "このコードは、継承を使ってAnimalクラスからDogクラスとCatクラスを作成しています。Animalクラスには、名前を格納するためのinitメソッドと、発声するためのspeakメソッドがあり、後者は抽象メソッドです。DogクラスとCatクラスでは、それぞれ適切な発声を行うためのspeakメソッドを実装しています。最後に、DogインスタンスとCatインスタンスを含むリストを作成し、各インスタンスの名前と発声を出力しています。"}], "is_classification": false}
{"id": "python_seed_task_26", "instruction": "与えられた文字列の中にある数字をすべて取り出し、新しい文字列を作成せよ。", "instances": [{"input": "\"I have 2 cats and 3 dogs.\"", "output": "```python\nimport re\n\ndef extract_numbers(string):\n    return \"\".join(re.findall(\"\\d+\", string))\n\nstring = \"I have 2 cats and 3 dogs.\"\nresult = extract_numbers(string)\nprint(result)  # Output: \"23\"\n```"}], "is_classification": false}
{"id": "python_seed_task_27", "instruction": "4. 与えられたCSVファイルの内容を読み込み、特定の列のデータを抽出するPythonコードを書いてください。", "instances": [{"input": "```\nimport pandas as pd\n\ndef extract_data_from_csv(file_path, column_name):\n    # ここに処理を記述\n\ndata_file = \"file.csv\"\ncolumn_name = \"id\"\n```", "output": "```\ndef extract_data_from_csv(file_path, column_name):\n    df = pd.read_csv(file_path)\n    return df[column_name].tolist()\n\ndata_file = \"file.csv\"\ncolumn_name = \"id\"\n\nextracted_data = extract_data_from_csv(data_file, column_name)\n```"}], "is_classification": false}
{"id": "python_seed_task_28", "instruction": "次のSQL文を実行し、抽出されたデータをPythonのディクショナリに変換してください。", "instances": [{"input": "```sql\nSELECT id, name FROM users WHERE age > 30;\n```", "output": "```python\nimport sqlite3\n\nconn = sqlite3.connect('my_database.db')\ncursor = conn.cursor()\n\nquery = \"SELECT id, name FROM users WHERE age > 30;\"\ncursor.execute(query)\n\nresult = cursor.fetchall()\nresult_dict = [{'id': row[0], 'name': row[1]} for row in result]\n\nconn.close()\n```"}], "is_classification": false}
{"id": "python_seed_task_29", "instruction": "与えられた2つの辞書をマージするpythonコードを書きなさい。", "instances": [{"input": "```python\ndict1 = {\"a\": 1, \"b\": 2}\ndict2 = {\"b\": 3, \"c\": 4}\n```", "output": "```python\nmerged_dict = {**dict1, **dict2}\nprint(merged_dict)\n```"}], "is_classification": false}
{"id": "python_seed_task_30", "instruction": "与えられたSQLデータベースから\"employees\"テーブルのレコードを取得して、年齢が30を超える従業員をリストに入れてください。", "instances": [{"input": "```sql\nCREATE TABLE employees (\n    id INT PRIMARY KEY,\n    name TEXT NOT NULL,\n    age INT NOT NULL\n);\n\nINSERT INTO employees VALUES (1, 'Alice', 35);\nINSERT INTO employees VALUES (2, 'Bob', 28);\nINSERT INTO employees VALUES (3, 'Carol', 42);\n```", "output": "```python\nimport sqlite3\n\nconn = sqlite3.connect('employees.db')\nc = conn.cursor()\n\nc.execute(\"SELECT name FROM employees WHERE age > 30\")\nresult = c.fetchall()\nprint([r[0] for r in result])\n\nconn.close()\n```"}], "is_classification": false}
{"id": "python_seed_task_31", "instruction": "Pythonのデータ分析ライブラリPandasを使用して, SQL文の結果をDataFrameに変換するコードを書きなさい。", "instances": [{"input": "```sql\nSELECT * FROM employees WHERE department = 'finance';\n```", "output": "```python\nimport pandas as pd\nimport sqlite3\n\n# Connect to the SQLite database\nconn = sqlite3.connect('database.db')\n\n# Query the SQLite database and convert the result to a pandas DataFrame\nquery = \"SELECT * FROM employees WHERE department = 'finance'\"\ndf = pd.read_sql(query, conn)\n\n# Close the SQLite connection\nconn.close()\n```"}], "is_classification": false}
{"id": "python_seed_task_32", "instruction": "次のPython関数について説明してください。", "instances": [{"input": "def greet(name):\n    return f\"Hello, {name}!\"", "output": "このPython関数は、引数として与えられた名前を使用してあいさつを返します。"}], "is_classification": false}
{"id": "python_seed_task_33", "instruction": "次のコードに問題があるかどうかを判別し、問題がある場合は修正したコードを記述してください。", "instances": [{"input": "```python\ndef find_max(nums):\n    max_num = None\n    for num in nums:\n        if max_num < num:\n            max_num = num\n    return max_num\n```", "output": "```python\ndef find_max(nums):\n    max_num = None\n    for num in nums:\n        if max_num is None or max_num < num:\n            max_num = num\n    return max_num\n```"}], "is_classification": false}
{"id": "python_seed_task_34", "instruction": "次の入力文字列の長さを出力するPythonコードを書きなさい。", "instances": [{"input": "\"Hello, World!\"", "output": "```python\ndef string_length(input_string):\n    return len(input_string)\n\ninput_string = \"Hello, World!\"\nprint(string_length(input_string))\n```"}], "is_classification": false}
{"id": "python_seed_task_35", "instruction": "リスト内の重複要素を削除するためのpythonコードを書きなさい。", "instances": [{"input": "[1, 2, 3, 2, 3, 4, 5, 5, 6]", "output": "```python\ndef remove_duplicates(input_list):\n    return list(set(input_list))\n\ninput_list = [1, 2, 3, 2, 3, 4, 5, 5, 6]\nprint(remove_duplicates(input_list))\n```"}], "is_classification": false}
{"id": "python_seed_task_36", "instruction": "与えられたcsvファイルから特定の列を抽出して、新しいcsvファイルに出力するプログラムを書きなさい。", "instances": [{"input": "Input CSV File:\n```\nName,Age,Gender\nAlice,20,F\nBob,25,M\nCharlie,30,M\nDavid,35,M\n```\nOutput CSV File:\nAge.csv (only containing the Age column)", "output": "```python\nimport csv\n\ndef extract_column(input_csv_file, output_csv_file, column_index):\n    with open(input_csv_file, 'r') as fin:\n        reader = csv.reader(fin)\n        header = next(reader)\n        column_data = [row[column_index] for row in reader]\n\n    with open(output_csv_file, 'w', newline='') as fout:\n        writer = csv.writer(fout)\n        writer.writerow([header[column_index]])\n        writer.writerows(column_data)\n\nextract_column('people.csv', 'Age.csv', 1)\n```"}], "is_classification": false}
{"id": "python_seed_task_37", "instruction": "与えられた文字列の中から、最初にあらわれる数字を探し出し、それを文字列として返す関数を書きなさい。すなわち、最初に見つかった数字を抽出します。", "instances": [{"input": "文字列: \"Python average age: 20, 35, 25, 30\"", "output": "```python\ndef first_number(string):\n    first_number = next((i for i in string.split() if i.isdigit()), None)\n    return first_number\n\nprint(first_number(\"Python average age: 20, 35, 25, 30\"))\n```"}], "is_classification": false}
{"id": "python_seed_task_38", "instruction": "与えられたリストの中から、 valued というキーを持つ辞書があれば、その辞書を返す関数を書きなさい。", "instances": [{"input": "リスト: [{'id': 1, 'name': 'John', 'value': 100}, {'id': 2, 'name': 'Jane', 'value': 200}]", "output": "```python\ndef find_by_value(lst, key):\n    return next((d for d in lst if key in d), None)\n\nprint(find_by_value([{'id': 1, 'name': 'John', 'value': 100}, {'id': 2, 'name': 'Jane', 'value': 200}], 'value'))\n```"}], "is_classification": false}
{"id": "python_seed_task_39", "instruction": "与えられたCSVファイルの中から、特定の条件を満たすデータを抽出するpython関数を書きなさい。", "instances": [{"input": "```csv\nid,name,age,country\n1,Alice,30,USA\n2,Bob,25,Canada\n3,Carol,20,Mexico\n```\n\n```python\ndef extract_data_by_condition(csv_file, condition):\n    \"\"\"\n    与えられたcsvファイルから、条件を満たすデータを抽出する関数を作成してください。\n    condition引数は、'age'と'country'のどちらか一方に限られます。\n    \"\"\"\n```", "output": "```python\nimport csv\n\ndef extract_data_by_condition(csv_file, condition):\n    with open(csv_file, 'r') as file:\n        reader = csv.DictReader(file)\n        if condition == 'age':\n            return [row for row in reader if int(row['age']) > 25]\n        elif condition == 'country':\n            return [row for row in reader if row['country'] == 'USA']\n        else:\n            return []\n```"}], "is_classification": false}
{"id": "python_seed_task_40", "instruction": "与えられた日付が、過去、今日、未来のどれであるかを判定するPython関数を書きなさい。", "instances": [{"input": "\"2023-02-28\"", "output": "```python\nfrom datetime import datetime\n\ndef check_date(date):\n    today = datetime.today()\n    given_date = datetime.strptime(date, \"%Y-%m-%d\")\n    if given_date < today:\n        return \"過去\"\n    elif given_date == today:\n        return \"今日\"\n    else:\n        return \"未来\"\n```"}], "is_classification": false}
{"id": "python_seed_task_41", "instruction": "あなたはSQLデータベースからデータを取得するPythonプログラムを書きました。SQLインジェクションを防ぐために、プログラムを修正してください。", "instances": [{"input": "```python\nimport sqlite3\n\nuser_input = input(\"名前を入力: \")\nquery = f\"SELECT * FROM users WHERE name = '{user_input}'\"\nconn = sqlite3.connect(\"database.db\")\ncursor = conn.cursor()\ncursor.execute(query)\nrows = cursor.fetchall()\nfor row in rows:\n    print(row)\n```", "output": "```python\nimport sqlite3\n\nuser_input = input(\"名前を入力: \")\nconn = sqlite3.connect(\"database.db\")\ncursor = conn.cursor()\nquery = \"SELECT * FROM users WHERE name = ?\"\ncursor.execute(query, (user_input,))\nrows = cursor.fetchall()\nfor row in rows:\n    print(row)\n```"}], "is_classification": false}
{"id": "python_seed_task_42", "instruction": "与えられた単語のリストからアナグラムを検出するPython関数を書きましょう。", "instances": [{"input": "", "output": "```python\ndef find_anagrams(word_list):\n    word_dict = {}\n    for word in word_list:\n        key = \"\".join(sorted(word))\n        if key in word_dict:\n            word_dict[key].append(word)\n        else:\n            word_dict[key] = [word]\n    anagrams = [v for v in word_dict.values() if len(v) > 1]\n    return anagrams\n```"}], "is_classification": false}
{"id": "python_seed_task_43", "instruction": "この関数の動作が理解できますか? その動作を説明してください。", "instances": [{"input": "```python\ndef add_values(dict_1, dict_2):\n    result = dict_1.copy()\n    for key, value in dict_2.items():\n        if key in result:\n            result[key] += value\n        else:\n            result[key] = value\n    return result\n```", "output": "この関数は、2つの辞書を引数として受け取り、辞書の値を足し合わせた新しい辞書を返します。ただし、キーが重複している場合、2つの値が足されます。"}], "is_classification": false}
{"id": "python_seed_task_44", "instruction": "プログラムが正しく動作しているかどうかを確認してください。", "instances": [{"input": "```python\ndef bubble_sort(lst):\n    for i in range(len(lst)):\n        for j in range(len(lst) - 1):\n            if lst[j] > lst[j + 1]:\n                lst[j], lst[j + 1] = lst[j + 1], lst[j]\n    return lst\n\nprint(bubble_sort([5, 2, 1, 8, 4]))\n```", "output": "ブロブルソートによって、リストが正しくソートされています。このプログラムは正常に動作しています。"}], "is_classification": false}
{"id": "python_seed_task_45", "instruction": "SQLite データベースからデータを抽出し、CSV 形式のファイルにエクスポートする Python スクリプトを書きなさい。", "instances": [{"input": "```\n<noinput>\n```", "output": "```\nimport sqlite3\nimport csv\n\n# Connect to the SQLite database\nconn = sqlite3.connect('my_database.db')\n\n# Create a cursor object\ncur = conn.cursor()\n\n# Execute a SELECT statement to extract the data\ncur.execute('SELECT * FROM my_table')\n\n# Get the column names\ncolumn_names = [desc[0] for desc in cur.description]\n\n# Open a CSV file for writing\nwith open('output.csv', 'w', newline='') as csvfile:\n    writer = csv.writer(csvfile)\n\n    # Write the column names to the CSV file\n    writer.writerow(column_names)\n\n    # Write the data to the CSV file\n    for row in cur:\n        writer.writerow(row)\n\n# Close the database connection\nconn.close()\n```"}], "is_classification": false}
{"id": "python_seed_task_46", "instruction": "SQLiteデータベースからデータを読み込み、pandas DataFrameに変換してください。", "instances": [{"input": "```sqlite\nCREATE TABLE items (id INTEGER PRIMARY KEY, name TEXT, price INTEGER);\nINSERT INTO items (name, price) VALUES ('Item 1', 100);\nINSERT INTO items (name, price) VALUES ('Item 2', 200);\nINSERT INTO items (name, price) VALUES ('Item 3', 300);\n```", "output": "```python\nimport sqlite3\nimport pandas as pd\n\n# Connect to the SQLite database\nconn = sqlite3.connect('items.db')\n\n# Read data from the items table\ndf = pd.read_sql_query(\"SELECT * FROM items\", conn)\n\n# Close the database connection\nconn.close()\n\nprint(df)\n```"}], "is_classification": false}
{"id": "python_seed_task_47", "instruction": "次の文字列から URL を抽出してください。", "instances": [{"input": "```python\ntext = \"今日は http://example.com を見ました。\"\n```", "output": "```python\nimport re\n\ntext = \"今日は http://example.com を見ました。\"\nmatch = re.search(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\(\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', text)\nurl = match.group() if match else None\n\nprint(url)  # http://example.com\n```"}], "is_classification": false}
{"id": "python_seed_task_48", "instruction": "このpythonコードの不十分な部分を修正してください。", "instances": [{"input": "```python\ndef add(a, b):\n    a + b\n\nprint(add(3, 5))\n```", "output": "```python\ndef add(a, b):\n    return a + b\n\nprint(add(3, 5))\n```"}], "is_classification": false}
{"id": "python_seed_task_49", "instruction": "次のpythonコードでプログラムが何を行っているのか説明してください。", "instances": [{"input": "def fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "output": "この関数は、与えられた数nのFibonacci数列のn番目の項を計算して返します。Fibonacci数列は、2つの前の項の和を用いて順に作られる数列です。"}], "is_classification": false}
{"id": "python_seed_task_50", "instruction": "次のSQLデータベースを操作するためのプログラムを作成してください。\n1. データベースから\"users\"テーブルを読み取り、\"username\"と\"email\"フィールドを含むリストを返します。", "instances": [{"input": "SQLデータベースのスキーマ:\n```sql\nCREATE TABLE users (\n    id INTEGER PRIMARY KEY,\n    username TEXT NOT NULL,\n    email TEXT NOT NULL UNIQUE\n);\n```", "output": "```python\nimport sqlite3\n\ndef get_users_from_db():\n    conn = sqlite3.connect('my_database.db')\n    cursor = conn.cursor()\n    cursor.execute(\"SELECT username, email FROM users\")\n    return [row for row in cursor]\n```"}], "is_classification": false}
{"id": "python_seed_task_51", "instruction": "与えられた文字列の先頭にあるスペースを除去するPython関数を書きなさい。", "instances": [{"input": "", "output": "```python\ndef remove_leading_spaces(s):\n    return s.lstrip()\n```"}], "is_classification": false}
{"id": "python_seed_task_52", "instruction": "与えられたPythonコードのバグを修正しなさい。", "instances": [{"input": "```python\ndef add(a, b):\n    return a + c\n```", "output": "```python\ndef add(a, b):\n    return a + b\n```"}], "is_classification": false}
{"id": "python_seed_task_53", "instruction": "与えられた文字列のすべての大文字を小文字に変換するpython関数を記述してください。", "instances": [{"input": "", "output": "```python\ndef to_lower(s):\n    return s.lower()\n```"}], "is_classification": false}
{"id": "python_seed_task_54", "instruction": "次のXMLデータから特定の要素を取り出して、コードを記述してください。'data'タグ内の'to'タグと'from'タグのテキストを取り出し、それぞれの変数に格納してください。", "instances": [{"input": "```xml\n<root>\n    <data>\n        <to>John</to>\n        <from>Jane</from>\n    </data>\n</root>\n```", "output": "```python\nimport xml.etree.ElementTree as ET\n\nxml_data = '''<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n    <data>\n        <to>John</to>\n        <from>Jane</from>\n    </data>\n</root>\n'''\n\nroot = ET.fromstring(xml_data)\nto_element = root.find(\".//to\")\nfrom_element = root.find(\".//from\")\nto = to_element.text\nfrom_ = from_element.text\nprint(to, from_)\n```"}], "is_classification": false}
{"id": "python_seed_task_55", "instruction": "次のコードの中で、'for'ループで繰り返し処理を行うべき部分を補完してください。", "instances": [{"input": "```python\nnumbers = [1, 2, 3, 4, 5]\nresult = []\n# for ループが必要です\nresult.append(numbers[0])\nresult.append(numbers[1])\nresult.append(numbers[2])\nresult.append(numbers[3])\nresult.append(numbers[4])\n```", "output": "```python\nnumbers = [1, 2, 3, 4, 5]\nresult = []\nfor i in range(len(numbers)):\n    result.append(numbers[i])\n```"}], "is_classification": false}
{"id": "python_seed_task_56", "instruction": "次のSQLデータベースからデータを抽出し、Pythonのコードを書いてください。'users'テーブルから名前と年齢を抽出し、すべてのレコードを表示してください。", "instances": [{"input": "usersテーブル\n```\nid | name  | age\n---|-------|----\n1  | John  | 20\n2  | Jane  | 22\n3  | Jim   | 25\n4  | Jill  | 18\n```", "output": "```python\nimport psycopg2\n\nconn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\ncur = conn.cursor()\ncur.execute(\"SELECT name, age FROM users;\")\nrows = cur.fetchall()\nfor row in rows:\n    print(row)\n```"}], "is_classification": false}
{"id": "python_seed_task_57", "instruction": "以下のSQLiteデータベースで受け取ったスコアランキングを計算するPython関数を記述してください。", "instances": [{"input": "```\nCREATE TABLE scores (\n    id INTEGER PRIMARY KEY,\n    name TEXT NOT NULL,\n    score INTEGER NOT NULL\n);\n\nINSERT INTO scores (name, score) VALUES\n('Alice', 85),\n('Bob', 92),\n('Charlie', 78),\n('David', 95),\n('Eve', 88);\n```", "output": "```python\nimport sqlite3\n\ndef get_score_ranking(db_file):\n    conn = sqlite3.connect(db_file)\n    cursor = conn.cursor()\n\n    # Fetch scores sorted by score in descending order\n    cursor.execute(\"SELECT name, score FROM scores ORDER BY score DESC\")\n    ranked_scores = cursor.fetchall()\n\n    # Calculate and add rank to each score\n    ranked_scores_with_rank = []\n    rank = 1\n    for i, score in enumerate(ranked_scores):\n        if i > 0 and ranked_scores[i-1][1] > score[1]:\n            rank += 1\n        ranked_scores_with_rank.append((score[0], score[1], rank))\n\n    return ranked_scores_with_rank\n\n# Example usage:\nranked_scores = get_score_ranking('scores.db')\nfor score in ranked_scores:\n    print(f\"{score[0]}: score={score[1]}, rank={score[2]}\")\n```"}], "is_classification": false}
{"id": "python_seed_task_58", "instruction": "次のXMLデータをパースして、「title」タグの中のテキストをすべて含むリストを返しなさい。", "instances": [{"input": "```\n<books>\n    <book>\n        <title>Python Cookbook</title>\n        <author>David Beazley</author>\n    </book>\n    <book>\n        <title>Fluent Python</title>\n        <author>Luciano Ramalho</author>\n    </book>\n</books>\n```", "output": "```\n['Python Cookbook', 'Fluent Python']\n```"}], "is_classification": false}
{"id": "python_seed_task_59", "instruction": "次のSQLクエリの結果を、pythonで辞書のリストに変換しなさい。", "instances": [{"input": "```\nSELECT name, age FROM user WHERE age > 20;\n```", "output": "```\n[{'name': 'Alice', 'age': '25'}, {'name': 'Bob', 'age': '30'}, {'name': 'Charlie', 'age': '35'}]\n```"}], "is_classification": false}
{"id": "python_seed_task_60", "instruction": "リストの要素を指定した文字で分割してください。", "instances": [{"input": "```python\nlst = [\"apple-banana\", \"cherry-date\", \"elderberry-fig\"]\ndelimiter = \"-\"\n```", "output": "```python\nresult = [item.split(delimiter) for item in lst]\nprint(result)\n```\n出力:\n```\n[['apple', 'banana'], ['cherry', 'date'], ['elderberry', 'fig']]\n```"}], "is_classification": false}
{"id": "python_seed_task_61", "instruction": "与えられたXMLを扱う関数を定義してください。", "instances": [{"input": "```python\nxml_input = '<root><element1>value1</element1><element2>value2</element2></root>'\n```", "output": "```python\nimport xml.etree.ElementTree as ET\n\ndef parse_xml(xml):\n    root = ET.fromstring(xml)\n    data = {}\n    for elem in root:\n        data[elem.tag] = elem.text\n    return data\nprint(parse_xml(xml_input))\n```\n出力:\n```\n{'element1': 'value1', 'element2': 'value2'}\n```"}], "is_classification": false}
{"id": "python_seed_task_62", "instruction": "入力されたCSVファイルからデータを読み込み、そのデータを出力するPythonスクリプトを生成します。", "instances": [{"input": "CSVファイル名：data.csv\nデータ：\n```\nName,Age,Country\nAlice,25,Japan\nBob,30,USA\nCharlie,35,Canada\n```", "output": "```\nimport csv\n\nwith open('data.csv', 'r') as f:\n    reader = csv.reader(f)\n    header = next(reader)\n    for row in reader:\n        print(row)\n```"}], "is_classification": false}
{"id": "python_seed_task_63", "instruction": "XMLデータを読み込み、特定のタグの内容を出力するPythonスクリプトを生成します。", "instances": [{"input": "- XMLファイル名：data.xml\n- 読み込みたいタグ：name\n- XMLデータ：\n```xml\n<data>\n  <person>\n    <name>Alice</name>\n    <age>25</age>\n    <country>Japan</country>\n  </person>\n  <person>\n    <name>Bob</name>\n    <age>30</age>\n    <country>USA</country>\n  </person>\n  <person>\n    <name>Charlie</name>\n    <age>35</age>\n    <country>Canada</country>\n  </person>\n</data>\n```", "output": "```\nimport xml.etree.ElementTree as ET\n\ntree = ET.parse('data.xml')\nroot = tree.getroot()\n\nfor person in root.findall('person'):\n    name = person.find('name').text\n    print(name)\n```"}], "is_classification": false}
{"id": "python_seed_task_64", "instruction": "与えられたリストにおいて、最大値と最小値を出力するPythonスクリプトを生成します。", "instances": [{"input": "リスト：[10, 20, 30, 40, 50]", "output": "```\nnumbers = [10, 20, 30, 40, 50]\n\nmax_num = max(numbers)\nmin_num = min(numbers)\n\nprint(\"最大:\", max_num)\nprint(\"最小:\", min_num)\n```"}], "is_classification": false}
{"id": "python_seed_task_65", "instruction": "与えられた文字列がパリプドロームとして成り立つかどうかを確認するPythonスクリプトを生成します。", "instances": [{"input": "文字列：level", "output": "```\nword = 'level'\n\nif word == word[::-1]:\n    print(\"パリプドロームです\")\nelse:\n    print(\"パリプドロームではありません\")\n```"}], "is_classification": false}
{"id": "python_seed_task_66", "instruction": "与えられた2つのリストを比較し、要素が一致するような場所を「True」、一致しない場所を「False」として表現したリストを出力してください。", "instances": [{"input": "```python\nlist1 = [1, 5, 8, 2, 9, 3, 7, 4, 6]\nlist2 = [1, 2, 7, 9, 3, 6]\n```", "output": "```python\ncomparison = [i in list2 for i in list1]\nprint(comparison)\n```"}], "is_classification": false}
{"id": "python_seed_task_67", "instruction": "次のエラーを修正して、正しく動作するPythonコードを提供してください。", "instances": [{"input": "```python\ndef get_even_numbers(numbers):\n    return [num for num in numbers if num % 2 = 0]\n\neven_numbers = get_even_numbers([1, 2, 3, 4, 5])\nprint(even_numbers)\n```", "output": "```python\ndef get_even_numbers(numbers):\n    return [num for num in numbers if num % 2 == 0]\n\neven_numbers = get_even_numbers([1, 2, 3, 4, 5])\nprint(even_numbers)\n```"}], "is_classification": false}
{"id": "python_seed_task_68", "instruction": "次のSQLクエリの結果をCSV形式で保存するPythonコードを書きなさい。", "instances": [{"input": "```sql\nSELECT * FROM employees WHERE salary > 50000;\n```", "output": "```python\nimport csv\nimport sqlite3\n\n# Connect to the SQLite database\nconn = sqlite3.connect('employees.db')\n\n# Create a cursor object\ncur = conn.cursor()\n\n# Execute the SQL query\ncur.execute(\"SELECT * FROM employees WHERE salary > 50000\")\n\n# Get the column names from the cursor description\ncolumns = [column[0] for column in cur.description]\n\n# Write the CSV header\nwith open('employees_over_50k.csv', 'w', newline='') as csvfile:\n    writer = csv.writer(csvfile)\n    writer.writerow(columns)\n\n    # Write the data rows\n    for row in cur.fetchall():\n        writer.writerow(row)\n\n# Close the cursor and the connection\ncur.close()\nconn.close()\n```"}], "is_classification": false}
{"id": "python_seed_task_69", "instruction": "Pythonコードを書きなさい。このコードでは、与えられたリストから2つの異なる要素をランダムに選ぶ関数を定義し、その関数を使って2つの異なる要素を選んで表示することができます。", "instances": [{"input": "", "output": "```python\nimport random\n\ndef pick_two_different(items):\n    return random.sample(items, 2)\n\nitems = [1, 2, 3, 4, 5]\na, b = pick_two_different(items)\nprint(f\"selected: {a}, {b}\")\n```"}], "is_classification": false}
{"id": "python_seed_task_70", "instruction": "次の記述を使って、Webページから情報をスクレイピングするPythonコードを書きなさい：BeautifulSoupとrequests。", "instances": [{"input": "https://en.wikipedia.org/wiki/Python_(programming_language)", "output": "```python\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://en.wikipedia.org/wiki/Python_(programming_language)\"\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.content, \"html.parser\")\n\n# ページのタイトルを取得\ntitle = soup.find(\"h1\", {\"id\": \"firstHeading\"}).text\n\n# 最初の段落のテキストを取得\nfirst_paragraph = soup.find(\"p\").text\n\nprint(f\"Title: {title}\")\nprint(f\"First paragraph: {first_paragraph}\")\n```"}], "is_classification": false}
{"id": "python_seed_task_71", "instruction": "次のPythonコードを読んで、コードが何をしているかを説明しなさい。", "instances": [{"input": "```python\ndef find_substring_in_string(main_string, substring):\n    return substring in main_string\n```", "output": "このコードは、メイン文字列にサブ文字列が含まれているかどうかを調べる関数を定義しています。"}], "is_classification": false}
{"id": "python_seed_task_72", "instruction": "次のような情報を格納したXMLファイルがあります。これを解析し、ある特定のタグの情報を取得するPython関数を作成しなさい。", "instances": [{"input": "```xml\n<root>\n    <child1>value1</child1>\n    <child2>value2</child2>\n</root>\n```", "output": "```python\nimport xml.etree.ElementTree as ET\n\ndef get_tag_value(file_name, tag):\n    tree = ET.parse(file_name)\n    root = tree.getroot()\n    if root.find(tag) is not None:\n        return root.find(tag).text\n    else:\n        return None\n```"}], "is_classification": false}
{"id": "python_seed_task_73", "instruction": "次のPythonコードを評価し、結果を出力しなさい。", "instances": [{"input": "```python\ndef add_numbers(a, b):\n    return a + b\n\nresult = add_numbers(5, 7)\n```", "output": "結果: 12"}], "is_classification": false}
{"id": "python_seed_task_74", "instruction": "次の Python コードを実行し、例外が発生した場合、その例外の種類を出力してください。", "instances": [{"input": "```python\ndef divide_numbers(a, b):\n    return a / b\n\ntry:\n    divide_numbers(10, 0)\nexcept Exception as e:\n    print(type(e))\n```", "output": "```\nZeroDivisionError\n```"}], "is_classification": false}
{"id": "python_seed_task_75", "instruction": "次のPythonコードを実行して、\"Hello, World!\" と表示します。しかし、print文を使わずに表示するにはどうすればよいですか？", "instances": [{"input": "```python\n_______(\"Hello, World!\")\n```", "output": "```python\nsys.stdout.write(\"Hello, World!\\n\")\n```"}], "is_classification": false}
{"id": "python_seed_task_76", "instruction": "与えられたリストをソートするPythonのコードを間違っているところを指摘し、修正してください。", "instances": [{"input": "```python\ndef sort_list(lst):\n    lst.sort()\n    return lst\n\nlst = [4, 2, 1, 3, 5]\nsort_list(lst)\n\n# このリストがソートされていないのはなぜですか?\nprint(lst)\n```", "output": "```python\ndef sort_list(lst):\n    lst.sort()\n    return lst\n\nlst = [4, 2, 1, 3, 5]\nlst = sort_list(lst)  # この行を修正する必要があります\n\n# 今度はリストがソートされています\nprint(lst)\n```"}], "is_classification": false}
{"id": "python_seed_task_77", "instruction": "提供されたSQLデータベースからデータを抽出し、それをPythonのリストに格納するPythonのコードを書きなさい。", "instances": [{"input": "- Database: Users\n    - Table: user\n    - Columns: name, age, job", "output": "```python\nimport sqlite3\n\nconn = sqlite3.connect('Users.db')\nc = conn.cursor()\n\nc.execute('SELECT name, age, job FROM user')\n\nrows = c.fetchall()\n\nlst = []\nfor row in rows:\n    lst.append({'name': row[0], 'age': row[1], 'job': row[2]})\n\nprint(lst)\n```"}], "is_classification": false}
{"id": "python_seed_task_78", "instruction": "与えられたCSVファイル内の特定の列の中央値をPythonで計算する関数を書いてください。", "instances": [{"input": "```\nimport pandas as pd\nimport numpy as np\n\ndef compute_median(file_path, column_name):\n    \"\"\"\n    この関数はCSVファイルから指定した列の中央値を計算します。\n    \"\"\"\n```", "output": "```\nimport pandas as pd\nimport numpy as np\n\ndef compute_median(file_path, column_name):\n    \"\"\"\n    この関数はCSVファイルから指定した列の中央値を計算します。\n    \"\"\"\n    data = pd.read_csv(file_path)\n    return np.median(data[column_name])\n```"}], "is_classification": false}
{"id": "python_seed_task_79", "instruction": "Pythonで与えられたCSVファイルをXMLに変換する関数を書いてください。", "instances": [{"input": "```\nimport csv\nimport xml.etree.ElementTree as ET\n\ndef csv_to_xml(csv_file, root_name, row_name):\n    \"\"\"\n    この関数はCSVファイルをXMLファイルに変換します。\n    \"\"\"\n```", "output": "```\nimport csv\nimport xml.etree.ElementTree as ET\n\ndef csv_to_xml(csv_file, root_name, row_name):\n    \"\"\"\n    この関数はCSVファイルをXMLファイルに変換します。\n    \"\"\"\n    data = []\n    with open(csv_file, 'r') as f:\n        reader = csv.DictReader(f)\n        for row in reader:\n            data.append(row)\n\n    root = ET.Element(root_name)\n    for row in data:\n        xml_row = ET.SubElement(root, row_name)\n        for key in row:\n            xml_child = ET.SubElement(xml_row, key)\n            xml_child.text = row[key]\n\n    tree = ET.ElementTree(root)\n    tree.write('output.xml')\n```"}], "is_classification": false}
{"id": "python_seed_task_80", "instruction": "6. Pythonのデータフレームを使って、与えられたxmlファイルから特定のタグの値を抽出するコードを書きなさい。", "instances": [{"input": "```python\nimport xml.etree.ElementTree as ET\nimport pandas as pd\n\ndef extract_values_from_xml(xml_file, tag):\n    \"\"\"\n    This function will extract the values of the specified tag from the given xml file\n    and return them as a pandas DataFrame.\n\n    For example:\n    xml_file:\n    <items>\n        <item>\n            <id>1</id>\n            <color>red</color>\n        </item>\n        <item>\n            <id>2</id>\n            <color>blue</color>\n        </item>\n    </items>\n\n    tag: 'color'\n    output:\n         color\n    0     red\n    1    blue\n    \"\"\"\n```", "output": "```python\n    tree = ET.parse(xml_file)\n    root = tree.getroot()\n    values = []\n    for item in root.findall('item'):\n        values.append(item.find(tag).text)\n    return pd.DataFrame(values, columns=[tag])\n```"}], "is_classification": false}
{"id": "python_seed_task_81", "instruction": "8. 与えられたディレクトリ内のテキストファイルの中に含まれる文字列を、指定された単語が含まれているかどうかを調べるコードを書きなさい。", "instances": [{"input": "```python\nimport os\n\ndef find_word_in_files(directory, word):\n    \"\"\"\n    This function will search for the specified word in all text files in the given directory.\n    If the word is found, the function will return True. Otherwise, it will return False.\n\n    For example:\n    directory: '/path/to/directory'\n    word: 'python'\n    output: True\n    \"\"\"\n```", "output": "```python\n    for root, dirs, files in os.walk(directory):\n        for filename in files:\n            if filename.endswith('.txt'):\n                with open(os.path.join(root, filename), 'r') as f:\n                    if word in f.read():\n                        return True\n    return False\n```"}], "is_classification": false}
{"id": "python_seed_task_82", "instruction": "与えられたXMLファイルから特定の要素を読み取って、それをPythonのデータフレームに変換する関数を書きなさい。", "instances": [{"input": "```xml\n<root>\n  <item>\n    <name>item1</name>\n    <price>100</price>\n    <quantity>5</quantity>\n  </item>\n  <item>\n    <name>item2</name>\n    <price>200</price>\n    <quantity>3</quantity>\n  </item>\n</root>\n```", "output": "```python\nimport xml.etree.ElementTree as ET\nimport pandas as pd\n\ndef xml_to_dataframe(xml_file):\n    # parse the XML\n    tree = ET.parse(xml_file)\n    root = tree.getroot()\n\n    # create a list to store the data\n    data = []\n\n    # iterate over each \"item\" element\n    for item in root.findall('item'):\n        name = item.find('name').text\n        price = float(item.find('price').text)\n        quantity = int(item.find('quantity').text)\n\n        # add the data to the list\n        data.append({\n            'name': name,\n            'price': price,\n            'quantity': quantity\n        })\n\n    # create a dataframe from the data\n    df = pd.DataFrame(data)\n\n    return df\n```"}], "is_classification": false}
{"id": "python_seed_task_83", "instruction": "与えられたSQLデータベースから、特定の条件に合致するデータを抽出し、CSVファイルに出力しなさい。", "instances": [{"input": "SQLデータベース: \"sales_data\"\nテーブル: \"products\"\n条件: \"price\" 列が100より大きいもの\n\nCSVファイル名: \"expensive_products.csv\"", "output": "```python\nimport sqlite3\nimport csv\n\n# Connect to the SQLite database\nconn = sqlite3.connect('sales_data.db')\n\n# Create a cursor object\ncur = conn.cursor()\n\n# Execute a SELECT statement to extract the required data\ncur.execute(\"SELECT * FROM products WHERE price > 100\")\n\n# Fetch all the rows as a list of tuples\nrows = cur.fetchall()\n\n# Define the column headers\nheaders = ['id', 'name', 'price']\n\n# Open a CSV file for writing\nwith open('expensive_products.csv', 'w', newline='') as csvfile:\n    # Create a CSV writer object\n    csvwriter = csv.writer(csvfile)\n\n    # Write the column headers as the first row\n    csvwriter.writerow(headers)\n\n    # Iterate over the rows and write each one as a new row in the CSV file\n    for row in rows:\n        csvwriter.writerow(row)\n\n# Close the connection to the database\nconn.close()\n```"}], "is_classification": false}
{"id": "python_seed_task_84", "instruction": "次のPythonコードがどのように動作するか説明してください。", "instances": [{"input": "```python\ndef find_max(numbers):\n    if len(numbers) == 0:\n        return None\n    maximum = numbers[0]\n    for num in numbers:\n        if num > maximum:\n            maximum = num\n    return maximum\n```", "output": "この関数はリスト内で最も大きい値を探し、その値を返します。数値が含まれていない場合はNoneを返します。"}], "is_classification": false}
{"id": "python_seed_task_85", "instruction": "次のコードを説明し、目的を明確にしてください。", "instances": [{"input": "```python\nimport xml.etree.ElementTree as ET\n\ndef parse_xml(file_name):\n    tree = ET.parse(file_name)\n    root = tree.getroot()\n    for elem in root.iter('item'):\n        print(elem.attrib['name'])\n```", "output": "このコードは、与えられたXMLファイルから'item'タグの'name'属性の値を抽出して表示します。"}], "is_classification": false}
{"id": "python_seed_task_86", "instruction": "与えられたSQLiteデータベース内のすべてのレコードを取得するコードを書きなさい。", "instances": [{"input": "データベース名: \"my_database.db\"\nテーブル名: \"employees\"", "output": "```python\nimport sqlite3\n\ndef get_all_records(db_name, table_name):\n    conn = sqlite3.connect(db_name)\n    cursor = conn.cursor()\n    cursor.execute(f\"SELECT * FROM {table_name}\")\n    rows = cursor.fetchall()\n    for row in rows:\n        print(row)\n    conn.close()\n```"}], "is_classification": false}
{"id": "python_seed_task_87", "instruction": "次の python コードの説明を日本語で書いてください。", "instances": [{"input": "def fizz_buzz(n):\n    for i in range(1,n+1):\n        if i % 15 == 0:\n            print(\"FizzBuzz\")\n        elif i % 3 == 0:\n            print(\"Fizz\")\n        elif i % 5 == 0:\n            print(\"Buzz\")\n        else:\n            print(i)", "output": "この python 関数は、与えられた数字 n に対して FizzBuzz 関数を実行します。fizz_buzz 関数では、1 から n までの数字をループし、それぞれについて以下のルールに従って処理を行います。15 の倍数の場合は \"FizzBuzz\" を出力し、3 の倍数の場合は \"Fizz\" を出力し、5 の倍数の場合は \"Buzz\" を出力し、上記の条件に当てはまらない場合は数字をそのまま出力します。"}], "is_classification": false}
{"id": "python_seed_task_88", "instruction": "この python コードの出力は何ですか？", "instances": [{"input": "a = [1, 2, 3, 4]\nb = [5, 6, 7, 8]\nc = a + b\nprint(c)", "output": "[1, 2, 3, 4, 5, 6, 7, 8]"}], "is_classification": false}
{"id": "python_seed_task_89", "instruction": "次のpythonコードを日本語で説明してください。", "instances": [{"input": "```python\ndef count_substring(string, sub_string):\n    count = start = 0\n    while start < len(string):\n        pos = string.find(sub_string, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count\n```", "output": "このコードは、与えられた文字列から、特定の部分文字列がいくつ含まれるかを数える関数です。文字列内で部分文字列が最初に見つかった位置から、次の部分文字列を検索し続け、含まれる部分文字列の数をカウントします。"}], "is_classification": false}
{"id": "python_seed_task_90", "instruction": "日本語の文章を含むCSVデータを読み込むpythonコードを記述してください。", "instances": [{"input": "", "output": "```python\nimport csv\nimport codecs\n\ndef read_csv(csv_file):\n    with codecs.open(csv_file, 'r', encoding='utf-8') as f:\n        reader = csv.reader(f)\n        rows = [row for row in reader]\n    return rows\n```"}], "is_classification": false}
{"id": "python_seed_task_91", "instruction": "次のSQLクエリを実行し、結果をpythonのリストに格納するpythonコードを記述してください。", "instances": [{"input": "SQLクエリ: SELECT * FROM customers WHERE age > 30", "output": "```python\nimport psycopg2\n\ndef execute_query(query, dbname, user, password, host):\n    conn = psycopg2.connect(dbname=dbname, user=user, password=password, host=host)\n    cur = conn.cursor()\n    cur.execute(query)\n    results = cur.fetchall()\n    cur.close()\n    conn.close()\n    return results\n\nquery = \"SELECT * FROM customers WHERE age > 30\"\ndbname = \"mydatabase\"\nuser = \"myuser\"\npassword = \"mypassword\"\nhost = \"localhost\"\n\nresults = execute_query(query, dbname, user, password, host)\n```"}], "is_classification": false}
{"id": "python_seed_task_92", "instruction": "次のPythonコードを読んで、与えられたリストの要素の合計を計算する関数が正しく動作するかどうかを検証してください。", "instances": [{"input": "```python\ndef sum_list(lst):\n    return sum(lst)\n```", "output": "テストケースを作成し、関数が正しく動作するかどうかを検証できます。\n```python\nassert sum_list([1, 2, 3, 4, 5]) == 15\nassert sum_list([]) == 0\n```"}], "is_classification": false}
{"id": "python_seed_task_93", "instruction": "以下のコードのバグを修正して、与えられた数値が素数かどうかを判定する関数を完成させてください。", "instances": [{"input": "```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n```", "output": "```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```"}], "is_classification": false}
{"id": "python_seed_task_94", "instruction": "与えられたリストの中で最大値を見つけるPython関数を記述してください。", "instances": [{"input": "", "output": "```python\ndef find_max(lst):\n    return max(lst)\n```"}], "is_classification": false}
{"id": "python_seed_task_95", "instruction": "Pythonで、与えられた XML データから特定の要素を抽出する方法を示してください。", "instances": [{"input": "`data.xml`:\n```xml\n<books>\n  <book>\n    <title>ブック1</title>\n    <author>著者1</author>\n  </book>\n  <book>\n    <title>ブック2</title>\n    <author>著者2</author>\n  </book>\n</books>\n```", "output": "```python\nimport xml.etree.ElementTree as ET\n\ndef extract_title(xml_data):\n    root = ET.fromstring(xml_data)\n    titles = [book.find('title').text for book in root.findall('book')]\n    return titles\n\n# Test the function\nxml_data = '''<books>\n  <book>\n    <title>ブック1</title>\n    <author>著者1</author>\n  </book>\n  <book>\n    <title>ブック2</title>\n    <author>著者2</author>\n  </book>\n</books>'''\ntitles = extract_title(xml_data)\nprint(titles)\n# Expected output:\n# ['ブック1', 'ブック2']\n```"}], "is_classification": false}
{"id": "python_seed_task_96", "instruction": "Python 関数を作成して、与えられた文字列を逆順に変更します。", "instances": [{"input": "", "output": "```python\ndef reverse_string(input_string):\n    return input_string[::-1]\n\n# Test the function\ninput_string = \"Hello, World!\"\nreversed_string = reverse_string(input_string)\nprint(reversed_string)\n# Expected output:\n# !dlroW ,olleH\n```"}], "is_classification": false}
